#Getting started - initializing a repository
git init - initializes a  git repo
git clone - clones an existing repo to your working directory

#saving your changes
git add -> add a file to the staging area 
git commit -> launches a text editor to enter your commit message and saves(commits) 
		your staged changes
git commit -a ->  commits all changes in the working directory
git commit -m "message " -> commits your changes with a message
git commit -am => combines git commit -a and git commit -m
git commit --ammend -> modifies the previous commit

# changes between your working directory and your repository
git diff- takes two input data sets and outputs the changes between them
git diff --cached comapares the staged changes with the local repository


#temporary shelve your changes and work on another change and later come back to finish your changes
git stash- temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on

git stash pop ->  removes the changes from your stash and reapplies them to your working copy.

git stash apply ->  you can reapply the changes to your working copy and keep them in your stash

git stash -u  / git stash --include-untracked -> includes untracked files because they arent stashed by default
git stash -a / git stash --all -> includes all ignored files because they are not stashed by default

git stash save "message" - give your stashes a description

git stash list -> view multiple stashes


git stash pop  stash@{1}-> choose which stash to re-apply by passing its identifier as the last argument

git stash -p -> partial stash


git stash drop stash@{1) -> delete a particular stash

git stash clear -> clears all your stash

#git ignore 

git rm --cached filename -> deletes the file from the repository but keeps it as ignored file in your working directory

#inspecting a git repository
git status -> displays the current state of the working directory and the staging area

git blame -> display of author metadata attached to specific committed lines in a file

git log -> command displays committed snapshots, will only show logs for the currently selected branch

#branching
git log --branches=*  -> logs commits across all branches

git branch -> view and visit other branches

git checkout -> easy way to “load” any of these saved snapshots onto your development machine

#undo a commit with git checkout
git checkout <correct commit before the one you want to undo > -b "new branch name" 		-> creates a new branch with the commits before the commit you are undoing

git revert <commit> -> create a new commit with the inverse of the last commit

<<<<<<< HEAD
=======
git reset <commit> -> resets the commit history to the specified commit

git clean -- force -> operates on untracked files, equivalent to rm command utility and its not undoable
>>>>>>> a28e276




